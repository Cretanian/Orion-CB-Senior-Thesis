{
	"info": {
		"_postman_id": "26bf6204-3962-49f7-bb3e-5289c824b0fc",
		"name": "MQTT IoT Agents",
		"description": "This tutorial uses introduces the use of the MQTT protocol across IoT devices connecting to FIWARE. The [UltraLight 2.0](http://fiware-iotagent-ul.readthedocs.io/en/latest/usermanual/index.html#user-programmers-manual) IoT Agent\ncreated in the [previous tutorial](https://github.com/Fiware/tutorials.IoT-Agent) is reconfigured to\ncommunicate with a set of dummy IoT devices using MQTT\n\n# What is MQTT?\n\nMQTT is publish-subscribe-based messaging protocol used in the Internet of Things. It works on top of the TCP/IP\nprotocol, and is designed for connections with remote locations where a \"small code footprint\" is required or the\nnetwork bandwidth is limited. The goal is to provide a protocol, which is bandwidth-efficient and uses little\nbattery power.\n\nThe [previous tutorial](https://github.com/Fiware/tutorials.IoT-Agent) used HTTP as its transport mechanism between\nthe devices and the IoT Agent. HTTP uses a request/response paradigm where each device connects directly to the IoT Agent.\nMQTT is different in that publish-subscribe is event-driven and pushes messages to clients. It requires an additional\ncentral communication point (known as the MQTT broker) which it is in charge of dispatching all messages between the senders and the rightful receivers. Each client that publishes a message to the broker, includes a **topic** into the message. The **topic** is the routing information for the broker. Each client that wants to receive messages subscribes to a certain **topic** and the broker delivers all messages with the matching **topic** to the client. Therefore the clients don’t have to know each other, they only communicate over the **topic**. This architecture enables highly scalable solutions without dependencies between the data producers and the data consumers.\n\n\nThe UltraLight 2.0 IoT Agent will only send or interpret messages using the [UltraLight 2.0](http://fiware-iotagent-ul.readthedocs.io/en/latest/usermanual/index.html#user-programmers-manual) syntax,\nhowever it can be used to send and receive messages over multiple **transport** mechanisms. Therefore we\nare able to use the same FIWARE generic enabler to connect to a wider range of IoT devices.\n\n#### Mosquitto MQTT Broker\n\n[Mosquitto](https://mosquitto.org/) is a readily available, open source MQTT broker which will be used during this tutorial.\nIt is available licensed under EPL/EDL. More information can be found at https://mosquitto.org/\n\n\n#### Device Monitor\n\nFor the purpose of this tutorial, a series of dummy IoT devices have been created, which will be attached to the context broker. Details of the architecture and protocol used can be found in the [IoT Sensors tutorial](https://github.com/Fiware/tutorials.IoT-Sensors)\nThe state of each device can be seen on the UltraLight device monitor web-page found at: `http://localhost:3000/device/monitor`\n\n![FIWARE Monitor](https://fiware.github.io/tutorials.IoT-over-MQTT/img/device-monitor.png)\n\n# Architecture\n\nThis application builds on the components created in [previous tutorials](https://github.com/Fiware/tutorials.IoT-Agent/). It\nwill make use of two FIWARE components - the [Orion Context Broker](https://fiware-orion.readthedocs.io/en/latest/) and the [IoT Agent for UltraLight 2.0](http://fiware-iotagent-ul.readthedocs.io/en/latest/). Usage of the Orion Context Broker is sufficient for an application to qualify as *“Powered by FIWARE”*.\nBoth the Orion Context Broker and the IoT Agent rely on open source [MongoDB](https://www.mongodb.com/) technology to keep persistence of the information they hold. We will also be using the dummy IoT devices created in the [previous tutorial](https://github.com/Fiware/tutorials.IoT-Agent/) \nAdditionally will add an instance of the [Mosquitto](https://mosquitto.org/) MQTT broker which is open source and available under the EPL/EDL.\n\n\nTherefore the overall architecture will consist of the following elements:\n\n* The FIWARE [Orion Context Broker](https://fiware-orion.readthedocs.io/en/latest/) which will receive requests using [NGSI](https://fiware.github.io/specifications/OpenAPI/ngsiv2)\n* The FIWARE [IoT Agent for UltraLight 2.0](http://fiware-iotagent-ul.readthedocs.io/en/latest/) which will:\n + receive southbound requests using [NGSI](https://fiware.github.io/specifications/OpenAPI/ngsiv2) and convert them to  [UltraLight 2.0](http://fiware-iotagent-ul.readthedocs.io/en/latest/usermanual/index.html#user-programmers-manual) MQTT topics for the MQTT Broker\n + listen to the **MQTT Broker** on registered topics to send measurements northbound\n* The [Mosquitto](https://mosquitto.org/) **MQTT Broker** which acts as a central communication point, passing \n  MQTT topics between the **IoT Agent** and IoT devices as necessary.\n* The underlying [MongoDB](https://www.mongodb.com/) database :\n  + Used by the **Orion Context Broker** to hold context data information such as data entities, subscriptions and registrations\n  + Used by the **IoT Agent** to hold device information such as device URLs and Keys\n* A webserver acting as set of [dummy IoT devices](https://github.com/Fiware/tutorials.IoT-Sensors) using the [UltraLight 2.0](http://fiware-iotagent-ul.readthedocs.io/en/latest/usermanual/index.html#user-programmers-manual) protocol running over MQTT.\n* The **Context Provider NGSI** proxy is not used in this tutorial. It does the following:\n  + receive requests using [NGSI](https://fiware.github.io/specifications/OpenAPI/ngsiv2)\n  + makes requests to publicly available data sources using their own APIs in a proprietary format \n  + returns context data back to the Orion Context Broker in [NGSI](https://fiware.github.io/specifications/OpenAPI/ngsiv2) format.\n* The **Stock Management Frontend**  is not used in this tutorial will it does the following:\n  + Display store information\n  + Show which products can be bought at each store\n  + Allow users to \"buy\" products and reduce the stock count.\n\n\nSince all interactions between the elements are initiated by HTTP or MQTT requests over TCP, the entities can be containerized and run from exposed ports. \n\n![](https://fiware.github.io/tutorials.IoT-over-MQTT/img/architecture.png)\n\nThe necessary configuration information for wiring up the Mosquitto MQTT Broker, the IoT devices and the IoT Agent can be seen in the services section of the associated `docker-compose.yml`  file:\n\n## Mosquitto Configuration\n\n```yaml\n  mosquitto:\n    image: eclipse-mosquitto\n    hostname: mosquitto\n    container_name: mosquitto\n    networks:\n        - default\n    expose:\n        - \"1883\"\n        - \"9001\"\n    ports:\n        - \"1883:1883\"\n        - \"9001:9001\"\n    volumes:\n      - ./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf\n    \n```\n\nThe `mosquitto` container is listening on two ports: \n\n* Port `3000` is exposed so we can post MQTT topics\n* Port `9001` is the standard port for HTTP/Websocket communications\n\nThe attached volume is a [configuration file](https://github.com/Fiware/tutorials.IoT-over-MQTT/blob/master/osquitto/mosquitto.conf) used to increase the debug level of the MQTT Message Broker.\n\n## Dummy IoT Devices Configuration\n\n```yaml\n  context-provider:\n    image: fiware/cp-web-app:latest\n    hostname: context-provider\n    container_name: context-provider\n    networks:\n        - default\n    expose:\n        - \"3000\"\n        - \"3001\"\n    ports:\n        - \"3000:3000\"\n        - \"3001:3001\"\n    environment:\n        - \"DEBUG=proxy:*\"\n        - \"PORT=3000\"\n        - \"DUMMY_DEVICES_PORT=3001\"\n        - \"DUMMY_DEVICES_API_KEY=4jggokgpepnvsb2uv4s40d59ov\"\n        - \"DUMMY_DEVICES_TRANSPORT=MQTT\"\n```\n\nThe `context-provider` container is listening on two ports: \n\n* Port `3000` is exposed so we can see the web-page displaying the Dummy IoT devices.\n* Port `3001` is exposed purely for tutorial access - so that cUrl or Postman can make UltraLight commands\n  without being part of the same network.\n\n\nThe `context-provider` container is driven by environment variables as shown:\n\n| Key |Value|Description|\n|-----|-----|-----------|\n|DEBUG|`proxy:*`| Debug flag used for logging |\n|PORT|`3000`|Port used by web-app which displays the dummy device data |\n|DUMMY_DEVICES_PORT|`3001`|Port used by the dummy IoT devices to receive commands |\n|DUMMY_DEVICES_API_KEY|`4jggokgpepnvsb2uv4s40d59ov`| Random security key used for UltraLight interactions - used to ensure the integrity of interactions between the devices and the IoT Agent |\n\nThe other `context-provider` container configuration values described in the YAML file are not used in this tutorial.\n\n## IoT Agent for UltraLight 2.0 Configuration\n\nThe [IoT Agent for UltraLight 2.0](http://fiware-iotagent-ul.readthedocs.io/en/latest/)  can be instantiated within a Docker container. An official Docker image is available from [Docker Hub](https://hub.docker.com/r/fiware/iotagent-ul/) tagged `fiware/iotagent-ul`. The \nnecessary configuration can be seen below:\n\n```yaml\n  iot-agent:\n    image: fiware/iotagent-ul:latest\n    hostname: iot-agent\n    container_name: fiware-iot-agent\n    depends_on:\n      - mongo-db\n    networks:\n        - default\n    expose:\n        - \"4041\"\n        - \"7896\"\n    ports:\n        - \"4041:4041\"\n        - \"7896:7896\"\n    environment:\n        - \"IOTA_CB_HOST=orion\"\n        - \"IOTA_CB_PORT=1026\"\n        - \"IOTA_NORTH_PORT=4041\"\n        - \"IOTA_REGISTRY_TYPE=mongodb\"\n        - \"IOTA_LOG_LEVEL=DEBUG\"\n        - \"IOTA_TIMESTAMP=true\"\n        - \"IOTA_MONGO_HOST=mongo-db\"\n        - \"IOTA_MONGO_PORT=27017\"\n        - \"IOTA_MONGO_DB=iotagentul\"\n        - \"IOTA_PROVIDER_URL=http://iot-agent:4041\"\n        - \"IOTA_MQTT_HOST=mosquitto\"\n        - \"IOTA_MQTT_PORT=1883\"\n```\n\nThe `iot-agent` container relies on the precence of the Orion Context Broker and uses a MongoDB database to hold device information such as device URLs and Keys. The container is listening on two ports: \n\n* Port `7896` is exposed to receive Ultralight measurements over HTTP from the Dummy IoT devices\n* Port `4041` is exposed purely for tutorial access - so that cUrl or Postman can make provisioning commands\n  without being part of the same network.\n\n\nThe `iot-agent` container is driven by environment variables as shown:\n\n| Key |Value|Description|\n|-----|-----|-----------|\n|IOTA_CB_HOST|`orion`| Hostname of the context broker to update context |\n|IOTA_CB_PORT|`1026`| Port that context broker listens on to update context |\n|IOTA_NORTH_PORT|`4041` | Port used for Configuring the IoT Agent and receiving context updates from the context broker |\n|IOTA_REGISTRY_TYPE|`mongodb`| Whether to hold IoT device info in memory or in a database |\n|IOTA_LOG_LEVEL|`DEBUG`|The log level of the IoT Agent |\n|IOTA_TIMESTAMP|`true`| Whether to supply timestamp information with each measurement received from attached devices |\n|IOTA_MONGO_HOST|`context-db`| The host name of mongoDB - used for holding device information |\n|IOTA_MONGO_PORT|`27017`| The port mongoDB is listening on |\n|IOTA_MONGO_DB|`iotagentul`| The name of the database used in mongoDB |\n|IOTA_PROVIDER_URL|`http://iot-agent:4041`| URL passed to the Context Broker when commands are registered, used as a forwarding URL location when the Context Broker issues a command to a device | \n|IOTA_MQTT_HOST|`mosquitto`| The host name of the MQTT Broker  |\n|IOTA_MQTT_PORT|`1883`| The port the MQTT Broker is listening on to receive topics |\n\nAs you can see, use of the MQTT transport is driven by only two environment variables `IOTA_MQTT_HOST` and `IOTA_MQTT_PORT`\n\n# Prerequisites\n\n## Docker and Docker Compose \n\nTo keep things simple all components will be run using [Docker](https://www.docker.com). **Docker** is a container technology which allows to different components isolated into their respective environments. \n\n* To install Docker on Windows follow the instructions [here](https://docs.docker.com/docker-for-windows/)\n* To install Docker on Mac follow the instructions [here](https://docs.docker.com/docker-for-mac/)\n* To install Docker on Linux follow the instructions [here](https://docs.docker.com/install/)\n\n**Docker Compose** is a tool for defining and running multi-container Docker applications. A \n[YAML file](https://raw.githubusercontent.com/Fiware/tutorials.IoT-over-MQTT/master/docker-compose.yml) is used\nconfigure the required services for the application. This means all container services can be brought up in a single \ncommand. Docker Compose is installed by default  as part of Docker for Windows and  Docker for Mac, however Linux users \nwill need to follow the instructions found  [here](https://docs.docker.com/compose/install/)\n## Cygwin for Windows\n\nWe will start up our services using a simple Bash script. Windows users should download [cygwin](http://www.cygwin.com/) to provide a command line functionality similar to a Linux distribution on Windows.\n\n\n# Start Up\n\nBefore you start you should ensure that you have obtained or built the necessary Docker images locally. Please clone the repository and create the necessary images by running the commands as shown:\n\n```console\ngit clone git@github.com:Fiware/tutorials.IoT-over-MQTT.git\ncd tutorials.IoT-over-MQTT\n\n./services create\n``` \n\n>**Note** The `context-provider` image has not yet been pushed to Docker hub.\n> Failing to build the Docker sources before proceeding will result in the following error:\n>\n>```\n>Pulling context-provider (fiware/cp-web-app:latest)...\n>ERROR: The image for the service you're trying to recreate has been removed.\n>```\n\n\nThereafter, all services can be initialized from the command line by running the [services](https://github.com/Fiware/tutorials.IoT-over-MQTT/blob/master/services) Bash script provided within the repository:\n\n```console\n./services start\n``` \n\n>:information_source: **Note:** If you want to clean up and start over again you can do so with the following command:\n>\n>```console\n>./services stop\n>``` \n>\n\n\n\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Full Tutorial - UL",
			"item": [
				{
					"name": "Only Sensor Device",
					"item": [
						{
							"name": "Provision an Sensor",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "fiware-service",
										"value": "houses",
										"type": "text"
									},
									{
										"key": "fiware-servicepath",
										"value": "/cretanian",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n \"devices\": [\n   {\n     \"device_id\":   \"motion003\",\n     \"entity_name\": \"urn:ngsi-ld:Motion:003\",\n     \"entity_type\": \"Motion\",\n     \"protocol\":    \"PDI-IoTA-UltraLight\",\n     \"transport\":   \"MQTT\",\n     \"timezone\":    \"Europe/Berlin\",\n     \"attributes\": [\n       { \"object_id\": \"c\", \"name\":\"count\", \"type\":\"Integer\"}\n      ],\n      \"static_attributes\": [\n         {\"name\":\"refRoom\", \"type\": \"Relationship\",\"value\": \"urn:ngsi-ld:Room:003\"}\n      ]\n   }\n ]\n}\n"
								},
								"url": {
									"raw": "http://{{iot-agent-UL}}/iot/devices",
									"protocol": "http",
									"host": [
										"{{iot-agent-UL}}"
									],
									"path": [
										"iot",
										"devices"
									]
								},
								"description": "It is common good practice to use URNs following the NGSI-LD [draft recommendation](https://docbox.etsi.org/ISG/CIM/Open/ISG_CIM_NGSI-LD_API_Draft_for_public_review.pdf) when creating entities. Furthermore it is easier to understand\nmeaningful names when defining data attributes. These mappings can be defined by provisioning a device individually.\n\nThree types of meaasurement attributes can be provisioned:\n\n* `attributes` are active readings from the device\n* `lazy` attributes are only sent on request -  The IoT Agent will inform the device to return the measurement\n* `static_attributes` are as the name suggests static data about the device (such as relationships) passed on \n  to the context broker.\n\n>**Note**: in the case where individual `id`s are not required, or aggregated data is sufficient \n> the `attributes` can be defined within the provisioning service rather than individually.\n\nIn the request we are assiociating the device `motion001` with the URN `urn:ngsd-ld:Motion:001`\nand mapping the device reading `c` with the context attribute `count` (which is defined as an `Integer`)\nA `refStore` is defined as a `static_attribute`, placing the device within **Store** `urn:ngsi-ld:Store:001`"
							},
							"response": []
						},
						{
							"name": "Read the Command Result From Orion",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "fiware-service",
										"value": "houses"
									},
									{
										"key": "fiware-servicepath",
										"value": "/cretanian"
									}
								],
								"url": {
									"raw": "http://{{orion}}/v2/entities/urn:ngsi-ld:Motion:003?options=keyValues",
									"protocol": "http",
									"host": [
										"{{orion}}"
									],
									"path": [
										"v2",
										"entities",
										"urn:ngsi-ld:Motion:003"
									],
									"query": [
										{
											"key": "options",
											"value": "keyValues"
										},
										{
											"key": "type",
											"value": "Motion",
											"disabled": true
										}
									]
								},
								"description": "This example returns the data for the `Motion` entity with the `id=urn:ngsd-ld:Motion:001` within the context data.\n\nThe response shows that the device with `id=motion001` has been successfully identifed by the IoT Agent and mapped to the\nentity `id=urn:ngsd-ld:Motion:001`. This new entity has been created within the context data. The `c` \nattribute from the dummy device measurement request has been mapped to the more meaningful `count` attribute\nwithin the context. As you will notice, a `TimeInstant` attribute has been added to both the entity and the\nmeta data of the attribute - this represents the last time the entity and attribute have been updated, and is\nautomatically added to each new entity because the `IOTA_TIMESTAMP`  environment variable was set when the\nIoT Agent was started up."
							},
							"response": []
						}
					]
				},
				{
					"name": "Only Actuators Device",
					"item": [
						{
							"name": "Provision an Actuator",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "fiware-service",
										"value": "houses"
									},
									{
										"key": "fiware-servicepath",
										"value": "/cretanian"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"devices\": [\n    {\n      \"device_id\": \"bell003\",\n      \"entity_name\": \"urn:ngsi-ld:Bell:003\",\n      \"entity_type\": \"Bell\",\n      \"protocol\": \"PDI-IoTA-UltraLight\",\n      \"transport\":   \"MQTT\",\n      \"commands\": [ \n        {\n          \"name\": \"ring\",\n          \"type\": \"command\"\n        }\n       ],\n       \"static_attributes\": [\n         {\"name\":\"refRoom\", \"type\": \"Relationship\",\"value\": \"urn:ngsi-ld:Room:004\"}\n    \t]\n    }\n  ]\n}\n"
								},
								"url": {
									"raw": "http://{{iot-agent-UL}}/iot/devices",
									"protocol": "http",
									"host": [
										"{{iot-agent-UL}}"
									],
									"path": [
										"iot",
										"devices"
									]
								},
								"description": "Provisioning an actuator is similar to provisioning a sensor. This time an `endpoint` attribute holds\nthe location where the IoT Agent needs to send the UltraLight command and the `commands` array includes\na list of each command that can be invoked. The example below provisions a bell with the `deviceId=bell001`.\nThe endpoint is `http://context-provider:3001/iot/bell001` and it can accept the `ring` command."
							},
							"response": []
						},
						{
							"name": "Invoke a Command",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "fiware-service",
										"value": "houses"
									},
									{
										"key": "fiware-servicepath",
										"value": "/cretanian"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"actionType\": \"update\",\n    \"entities\": [\n        {\n            \"type\": \"Bell\",\n            \"id\": \"urn:ngsi-ld:Bell:003\",\n            \"ring\" : {\n                \"type\": \"command\",\n                \"value\": \"\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{iot-agent-UL}}/v2/op/update",
									"protocol": "http",
									"host": [
										"{{iot-agent-UL}}"
									],
									"path": [
										"v2",
										"op",
										"update"
									]
								},
								"description": "A command can be invoked within IoT Agent by amending the context of the device using the NGSI v1 `/v1/updateContext` endpoint. This will endpoint will eventually be invoked by the context broker once we have wired it up. To test the configuration you can run the command directly as shown.\n\nIf you are viewing the device monitor page, you can also see the state of the bell change.\n\n![](https://fiware.github.io/tutorials.IoT-Agent/img/bell-ring.gif)"
							},
							"response": []
						},
						{
							"name": "Ring Bell Copy",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "fiware-service",
										"value": "houses"
									},
									{
										"key": "fiware-servicepath",
										"value": "/cretanian"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ring\": {\n      \"type\" : \"command\",\n      \"value\" : \"\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{orion}}/v2/entities/urn:ngsi-ld:Bell:003/attrs",
									"protocol": "http",
									"host": [
										"{{orion}}"
									],
									"path": [
										"v2",
										"entities",
										"urn:ngsi-ld:Bell:003",
										"attrs"
									]
								},
								"description": "To invoke the `ring` command, the `ring` attribute must be updated in the context.\n\nIf you are viewing the device monitor page, you can also see the state of the bell change.\n\n![](https://fiware.github.io/tutorials.IoT-Agent/img/bell-ring.gif)"
							},
							"response": []
						},
						{
							"name": "Read the Command Result From Orion",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "fiware-service",
										"value": "houses"
									},
									{
										"key": "fiware-servicepath",
										"value": "/cretanian"
									}
								],
								"url": {
									"raw": "http://{{orion}}/v2/entities/urn:ngsi-ld:Bell:003?options=keyValues",
									"protocol": "http",
									"host": [
										"{{orion}}"
									],
									"path": [
										"v2",
										"entities",
										"urn:ngsi-ld:Bell:003"
									],
									"query": [
										{
											"key": "options",
											"value": "keyValues"
										},
										{
											"key": "type",
											"value": "Bell",
											"disabled": true
										}
									]
								},
								"description": "The result of the command to ring the bell can be read by querying the entity within the Orion Context Broker. \n\nThe `TimeInstant` shows last the time any command associated with the entity has been invoked. the result of `ring` command can be see in the value of the `ring_info` attribute"
							},
							"response": []
						}
					]
				},
				{
					"name": "Semi Sensor and Actuator Device",
					"item": [
						{
							"name": "Provision a Smart Door",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "fiware-service",
										"value": "houses"
									},
									{
										"key": "fiware-servicepath",
										"value": "/cretanian"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"devices\": [\n    {\n      \"device_id\": \"door003\",\n      \"entity_name\": \"urn:ngsi-ld:Door:003\",\n      \"entity_type\": \"Door\",\n      \"protocol\": \"PDI-IoTA-UltraLight\",\n      \"transport\": \"MQTT\",\n      \"commands\": [ \n        {\"name\": \"unlock\",\"type\": \"command\"},\n        {\"name\": \"open\",\"type\": \"command\"},\n        {\"name\": \"close\",\"type\": \"command\"},\n        {\"name\": \"lock\",\"type\": \"command\"}\n       ],\n       \"attributes\": [\n       \t{\"object_id\": \"s\", \"name\": \"state\", \"type\":\"Text\"}\n       ],\n       \"static_attributes\": [\n         {\"name\":\"refRoom\", \"type\": \"Relationship\",\"value\": \"urn:ngsi-ld:Room:001\"}\n       ]\n    }\n  ]\n}\n"
								},
								"url": {
									"raw": "http://{{iot-agent-UL}}/iot/devices",
									"protocol": "http",
									"host": [
										"{{iot-agent-UL}}"
									],
									"path": [
										"iot",
										"devices"
									]
								},
								"description": "Provisioning  a device which offers both commands and measurements is merely a matter of making an HTTP POST request\nwith both `attributes` and `command` attributes in the body of the request.\n\nThis example provisions a smart door with four commands `lock`, `unlock`, `open` and `close` and maps a single attribute."
							},
							"response": []
						},
						{
							"name": "Provision a Smart Lamp",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "fiware-service",
										"value": "houses"
									},
									{
										"key": "fiware-servicepath",
										"value": "/cretanian"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"devices\": [\n    {\n      \"device_id\": \"lamp003\",\n      \"entity_name\": \"urn:ngsi-ld:Lamp:003\",\n      \"entity_type\": \"Lamp\",\n      \"protocol\": \"PDI-IoTA-UltraLight\",\n      \"transport\": \"MQTT\",\n      \"commands\": [ \n        {\"name\": \"on\",\"type\": \"command\"},\n        {\"name\": \"off\",\"type\": \"command\"}\n       ],\n       \"attributes\": [\n       \t{\"object_id\": \"s\", \"name\": \"state\", \"type\":\"Text\"},\n        {\"object_id\": \"l\", \"name\": \"luminosity\", \"type\":\"Integer\"}\n       ],\n       \"static_attributes\": [\n         {\"name\":\"refRoom\", \"type\": \"Relationship\",\"value\": \"urn:ngsi-ld:Room:002\"}\n    \t]\n    }\n  ]\n}\n"
								},
								"url": {
									"raw": "http://{{iot-agent-UL}}/iot/devices",
									"protocol": "http",
									"host": [
										"{{iot-agent-UL}}"
									],
									"path": [
										"iot",
										"devices"
									]
								},
								"description": "Provisioning  a device which offers both commands and measurements is merely a matter of making an HTTP POST request\nwith both `attributes` and `command` attributes in the body of the request.\n\nThis example provisions a smart door with two commands `on` and `off` and maps two attributes."
							},
							"response": []
						},
						{
							"name": "Read the Command Result From Orion",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "fiware-service",
										"value": "houses"
									},
									{
										"key": "fiware-servicepath",
										"value": "/cretanian"
									}
								],
								"url": {
									"raw": "http://{{orion}}/v2/entities/urn:ngsi-ld:Door:003",
									"protocol": "http",
									"host": [
										"{{orion}}"
									],
									"path": [
										"v2",
										"entities",
										"urn:ngsi-ld:Door:003"
									],
									"query": [
										{
											"key": "options",
											"value": "keyValues",
											"disabled": true
										},
										{
											"key": "type",
											"value": "Door",
											"disabled": true
										}
									]
								},
								"description": "This example returns the data for the `Motion` entity with the `id=urn:ngsd-ld:Motion:001` within the context data.\n\nThe response shows that the device with `id=motion001` has been successfully identifed by the IoT Agent and mapped to the\nentity `id=urn:ngsd-ld:Motion:001`. This new entity has been created within the context data. The `c` \nattribute from the dummy device measurement request has been mapped to the more meaningful `count` attribute\nwithin the context. As you will notice, a `TimeInstant` attribute has been added to both the entity and the\nmeta data of the attribute - this represents the last time the entity and attribute have been updated, and is\nautomatically added to each new entity because the `IOTA_TIMESTAMP`  environment variable was set when the\nIoT Agent was started up."
							},
							"response": []
						},
						{
							"name": "Invoke a Command",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "fiware-service",
										"value": "houses"
									},
									{
										"key": "fiware-servicepath",
										"value": "/cretanian"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"actionType\": \"update\",\n    \"entities\": [\n        {\n            \"type\": \"Door\",\n            \"id\": \"urn:ngsi-ld:Door:003\",\n            \"open\" : {\n                \"type\": \"command\",\n                \"value\": \"\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{iot-agent-UL}}/v2/op/update",
									"protocol": "http",
									"host": [
										"{{iot-agent-UL}}"
									],
									"path": [
										"v2",
										"op",
										"update"
									]
								},
								"description": "A command can be invoked within IoT Agent by amending the context of the device using the NGSI v1 `/v1/updateContext` endpoint. This will endpoint will eventually be invoked by the context broker once we have wired it up. To test the configuration you can run the command directly as shown.\n\nIf you are viewing the device monitor page, you can also see the state of the bell change.\n\n![](https://fiware.github.io/tutorials.IoT-Agent/img/bell-ring.gif)"
							},
							"response": []
						},
						{
							"name": "Open door",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "fiware-service",
										"value": "houses"
									},
									{
										"key": "fiware-servicepath",
										"value": "/cretanian"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"open\": {\n      \"type\" : \"command\",\n      \"value\" : \"\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{orion}}/v2/entities/urn:ngsi-ld:Door:003/attrs",
									"protocol": "http",
									"host": [
										"{{orion}}"
									],
									"path": [
										"v2",
										"entities",
										"urn:ngsi-ld:Door:003",
										"attrs"
									]
								},
								"description": "To invoke the `ring` command, the `ring` attribute must be updated in the context.\n\nIf you are viewing the device monitor page, you can also see the state of the bell change.\n\n![](https://fiware.github.io/tutorials.IoT-Agent/img/bell-ring.gif)"
							},
							"response": []
						},
						{
							"name": "Read the Command Result From Orion",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "fiware-service",
										"value": "houses"
									},
									{
										"key": "fiware-servicepath",
										"value": "/cretanian"
									}
								],
								"url": {
									"raw": "http://{{orion}}/v2/entities/urn:ngsi-ld:Door:003",
									"protocol": "http",
									"host": [
										"{{orion}}"
									],
									"path": [
										"v2",
										"entities",
										"urn:ngsi-ld:Door:003"
									],
									"query": [
										{
											"key": "options",
											"value": "keyValues",
											"disabled": true
										},
										{
											"key": "type",
											"value": "Door",
											"disabled": true
										}
									]
								},
								"description": "The result of the command to ring the bell can be read by querying the entity within the Orion Context Broker. \n\nThe `TimeInstant` shows last the time any command associated with the entity has been invoked. the result of `ring` command can be see in the value of the `ring_info` attribute"
							},
							"response": []
						}
					]
				},
				{
					"name": "IoT Agent - Obtain Version Information",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{iot-agent-UL}}/iot/about",
							"protocol": "http",
							"host": [
								"{{iot-agent-UL}}"
							],
							"path": [
								"iot",
								"about"
							]
						},
						"description": "Once the IoT Agent is running, You can check the status by making an HTTP request to the exposed port. \nIf the response is blank, this is usually because the MongoDB database holding the context information is not running or not connected.\n\n>**Troubleshooting:** What if the response is blank ?\n>\n> * To check that a docker container is running try\n>\n>```bash\n>docker ps\n>```\n>\n>You should see several containers running. If `iot-agent` is not running, you can restart the containers as necessary."
					},
					"response": []
				},
				{
					"name": "Create a Service Group",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "fiware-service",
								"value": "houses",
								"type": "text"
							},
							{
								"key": "fiware-servicepath",
								"value": "/cretanian",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"services\": [\n   {\n     \"apikey\":      \"6jggokgpepnvsb2uv4s40d59ov\",\n     \"cbroker\":     \"http://orion:1026\",\n     \"entity_type\": \"Thing\",\n     \"resource\":    \"\"\n   }\n ]\n}"
						},
						"url": {
							"raw": "http://{{iot-agent-UL}}/iot/services",
							"protocol": "http",
							"host": [
								"{{iot-agent-UL}}"
							],
							"path": [
								"iot",
								"services"
							]
						},
						"description": "This example provisions an anonymous group of devices. It tells the IoT Agent that a series of devices\nwill be sending messages to the `IOTA_HTTP_PORT` (where the IoT Agent is listening for **Northbound** communications)\n\nIn the example the IoT Agent is informed that the `/iot/d` endpoint will be used and that devices will authenticate\nthemselves by including the token `4jggokgpepnvsb2uv4s40d59ov`."
					},
					"response": []
				},
				{
					"name": "Read Service Group details",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "fiware-service",
								"value": "houses",
								"type": "text"
							},
							{
								"key": "fiware-servicepath",
								"value": "/cretanian",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{iot-agent-UL}}/iot/services",
							"protocol": "http",
							"host": [
								"{{iot-agent-UL}}"
							],
							"path": [
								"iot",
								"services"
							],
							"query": [
								{
									"key": "apikey",
									"value": "4jggokgpepnvsb2uv4s40d59ov",
									"disabled": true
								}
							]
						},
						"description": "This example obtains the full details of a provisioned services with a given `resource` path.\n\nThe response includes all the defaults associated with the service group such as the `entity_type` and any default commands or attribute mappings.\n\nService group details can be read by making a GET request to the `/iot/services` endpoint and providing a `resource` parameter."
					},
					"response": []
				},
				{
					"name": "Delete a Service Group Copy",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "fiware-service",
								"value": "houses"
							},
							{
								"key": "fiware-servicepath",
								"value": "/cretanian"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{iot-agent-UL}}/iot/services/?apikey=6jggokgpepnvsb2uv4s40d59ov",
							"protocol": "http",
							"host": [
								"{{iot-agent-UL}}"
							],
							"path": [
								"iot",
								"services",
								""
							],
							"query": [
								{
									"key": "apikey",
									"value": "6jggokgpepnvsb2uv4s40d59ov"
								}
							]
						},
						"description": "This example removes a provisioned service group by making a DELETE request to the `/iot/services/` endpoint.\n\nIt means that requests to `http://iot-agent:7896/iot/d?i=<device_id>&k=4jggokgpepnvsb2uv4s40d59ov`\n(where the IoT Agent is listening for **Northbound** communications) should no longer be processed by the IoT Agent. \nThe `apiKey` and `resource` parameters must be supplied in order to identify the service group to be deleted."
					},
					"response": []
				},
				{
					"name": "Read Provisioned Device Details",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "fiware-service",
								"value": "houses",
								"type": "text"
							},
							{
								"key": "fiware-servicepath",
								"value": "/cretanian",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{iot-agent-UL}}/iot/devices/",
							"protocol": "http",
							"host": [
								"{{iot-agent-UL}}"
							],
							"path": [
								"iot",
								"devices",
								""
							]
						},
						"description": "This example obtains the full details of a provisioned device with a given `<device-id>` path.\n\nThe response includes all the commands and attributes mappings associated with the device\n\nProvisioned Device details can be read by making a GET request to the `/iot/devices/<device-id>` endpoint."
					},
					"response": []
				},
				{
					"name": "Update a Provisioned Device",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "fiware-service",
								"value": "houses"
							},
							{
								"key": "fiware-servicepath",
								"value": "/cretanian"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"entity_type\": \"KOUDOUNI\"\n}"
						},
						"url": {
							"raw": "http://{{iot-agent-UL}}/iot/devices/bell003",
							"protocol": "http",
							"host": [
								"{{iot-agent-UL}}"
							],
							"path": [
								"iot",
								"devices",
								"bell003"
							]
						},
						"description": "This example updates an existing provisioned device by making a PUT request to the `/iot/devices/<device-id>` endpoint."
					},
					"response": []
				},
				{
					"name": "Delete a Provisioned Device",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "fiware-service",
								"value": "houses"
							},
							{
								"key": "fiware-servicepath",
								"value": "/cretanian"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{iot-agent-UL}}/iot/devices/bell003",
							"protocol": "http",
							"host": [
								"{{iot-agent-UL}}"
							],
							"path": [
								"iot",
								"devices",
								"bell003"
							]
						},
						"description": "This example removes a provisioned device by making a DELETE request to the `/iot/services/<device-id>` endpoint.\n\nThe device attributes will no longer be mapped and commands can no longer be sent to the device.\nIf the device is making active measurements, they will still be handled with default values\nif the associated service has not been deleted."
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "iot-agent-UL",
			"value": "localhost:4061"
		},
		{
			"key": "orion",
			"value": "localhost:1026"
		}
	]
}